# Exerc√≠cio 3: Verificador de Senhas Fortes
# Este programa avalia a for√ßa de senhas informadas pelo usu√°rio

import re

def verificar_comprimento(senha):
    """Verifica se a senha tem pelo menos 8 caracteres"""
    return len(senha) >= 8

def verificar_numero(senha):
    """Verifica se a senha cont√©m pelo menos um n√∫mero"""
    return bool(re.search(r'\d', senha))

def verificar_letra_maiuscula(senha):
    """Verifica se a senha cont√©m pelo menos uma letra mai√∫scula"""
    return bool(re.search(r'[A-Z]', senha))

def verificar_letra_minuscula(senha):
    """Verifica se a senha cont√©m pelo menos uma letra min√∫scula"""
    return bool(re.search(r'[a-z]', senha))

def verificar_caractere_especial(senha):
    """Verifica se a senha cont√©m pelo menos um caractere especial"""
    return bool(re.search(r'[!@#$%^&*()_+\-=\[\]{};\':"\\|,.<>\/?]', senha))

def avaliar_senha(senha):
    """Avalia a for√ßa da senha e retorna detalhes"""
    criterios = {
        'comprimento': verificar_comprimento(senha),
        'numero': verificar_numero(senha),
        'maiuscula': verificar_letra_maiuscula(senha),
        'minuscula': verificar_letra_minuscula(senha),
        'especial': verificar_caractere_especial(senha)
    }
    
    # Contar crit√©rios atendidos
    criterios_atendidos = sum(criterios.values())
    
    # Determinar for√ßa da senha
    if criterios_atendidos >= 4 and criterios['comprimento'] and criterios['numero']:
        forca = "Muito Forte"
        emoji = "üîí"
        cor = "verde"
    elif criterios_atendidos >= 3 and criterios['comprimento'] and criterios['numero']:
        forca = "Forte"
        emoji = "üõ°Ô∏è"
        cor = "azul"
    elif criterios_atendidos >= 2 and criterios['comprimento']:
        forca = "M√©dia"
        emoji = "‚ö†Ô∏è"
        cor = "amarelo"
    else:
        forca = "Fraca"
        emoji = "‚ùå"
        cor = "vermelho"
    
    return forca, emoji, criterios, criterios_atendidos

def exibir_relatorio_senha(senha, forca, emoji, criterios, criterios_atendidos):
    """Exibe relat√≥rio detalhado da avalia√ß√£o da senha"""
    print(f"\nüìä RELAT√ìRIO DE AVALIA√á√ÉO DA SENHA")
    print("=" * 45)
    print(f"Senha: {'*' * len(senha)} ({len(senha)} caracteres)")
    print(f"For√ßa: {emoji} {forca}")
    print(f"Crit√©rios atendidos: {criterios_atendidos}/5")
    
    print(f"\n‚úÖ Crit√©rios de Seguran√ßa:")
    print(f"{'‚úÖ' if criterios['comprimento'] else '‚ùå'} Pelo menos 8 caracteres")
    print(f"{'‚úÖ' if criterios['numero'] else '‚ùå'} Cont√©m n√∫meros")
    print(f"{'‚úÖ' if criterios['maiuscula'] else '‚ùå'} Cont√©m letras mai√∫sculas")
    print(f"{'‚úÖ' if criterios['minuscula'] else '‚ùå'} Cont√©m letras min√∫sculas")
    print(f"{'‚úÖ' if criterios['especial'] else '‚ùå'} Cont√©m caracteres especiais")

def dar_dicas_melhoria(criterios):
    """Fornece dicas para melhorar a senha"""
    dicas = []
    
    if not criterios['comprimento']:
        dicas.append("‚Ä¢ Use pelo menos 8 caracteres")
    if not criterios['numero']:
        dicas.append("‚Ä¢ Adicione n√∫meros (0-9)")
    if not criterios['maiuscula']:
        dicas.append("‚Ä¢ Inclua letras mai√∫sculas (A-Z)")
    if not criterios['minuscula']:
        dicas.append("‚Ä¢ Inclua letras min√∫sculas (a-z)")
    if not criterios['especial']:
        dicas.append("‚Ä¢ Use caracteres especiais (!@#$%^&*)")
    
    if dicas:
        print(f"\nüí° Dicas para melhorar sua senha:")
        for dica in dicas:
            print(dica)

def main():
    print("=== VERIFICADOR DE SENHAS FORTES ===")
    print("Avalie a seguran√ßa das suas senhas")
    print("Digite 'sair' para encerrar o programa")
    
    tentativas = 0
    senhas_testadas = []
    
    while True:
        print(f"\n" + "="*50)
        senha = input("Digite a senha para verificar (ou 'sair'): ").strip()
        
        if senha.lower() == 'sair':
            print("\nüëã Encerrando verificador de senhas...")
            break
        
        if not senha:
            print("‚ùå Senha n√£o pode estar vazia!")
            continue
        
        tentativas += 1
        forca, emoji, criterios, criterios_atendidos = avaliar_senha(senha)
        
        # Armazenar hist√≥rico (sem mostrar a senha real)
        senhas_testadas.append({
            'numero': tentativas,
            'comprimento': len(senha),
            'forca': forca,
            'criterios': criterios_atendidos
        })
        
        # Exibir relat√≥rio
        exibir_relatorio_senha(senha, forca, emoji, criterios, criterios_atendidos)
        
        # Dar dicas se necess√°rio
        if forca in ["Fraca", "M√©dia"]:
            dar_dicas_melhoria(criterios)
        
        # Verificar se a senha √© forte o suficiente
        if forca in ["Forte", "Muito Forte"]:
            print(f"\nüéâ Parab√©ns! Sua senha √© {forca.lower()}!")
            print("üîê Esta senha oferece boa prote√ß√£o.")
            
            continuar = input("\nDeseja testar outra senha? (s/n): ").strip().lower()
            if continuar != 's':
                break
        else:
            print(f"\n‚ö†Ô∏è Senha {forca.lower()}! Recomendamos criar uma senha mais segura.")
    
    # Resumo final se houver senhas testadas
    if senhas_testadas:
        print(f"\nüìà RESUMO DA SESS√ÉO")
        print("=" * 30)
        print(f"Total de senhas testadas: {len(senhas_testadas)}")
        
        # Estat√≠sticas
        forcas = [s['forca'] for s in senhas_testadas]
        print(f"‚Ä¢ Senhas fracas: {forcas.count('Fraca')}")
        print(f"‚Ä¢ Senhas m√©dias: {forcas.count('M√©dia')}")
        print(f"‚Ä¢ Senhas fortes: {forcas.count('Forte')}")
        print(f"‚Ä¢ Senhas muito fortes: {forcas.count('Muito Forte')}")
        
        if senhas_testadas:
            media_criterios = sum(s['criterios'] for s in senhas_testadas) / len(senhas_testadas)
            print(f"‚Ä¢ M√©dia de crit√©rios atendidos: {media_criterios:.1f}/5")

if __name__ == "__main__":
    main()
